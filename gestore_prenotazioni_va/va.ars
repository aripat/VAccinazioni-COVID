DEFINE urlset all = { /* }; // */
DEFINE urlset msvc_categoria = { /scopri_categoria, /scopri_categoria/* }; //*/
DEFINE urlset msvc_home = { /, /home };
DEFINE urlset msvc_prenotazione = { /prenota_appuntamento, /prenota_appuntamento/* }; //*/
DEFINE urlset msvc_riepilogo = { /riepilogo, /riepilogo/* }; //*/
DEFINE urlset error_page = { /error_page, /error_page/* }; //*/

DEFINE set s = {}; 


// Redirect verso la Home Page
DEFINE AR "GoHome"
	CONDITION
		CALL is_request_method WITH "GET"
		http.url is in msvc_home
	ACTION
		tcp.redirect "? to-application-server"
	;

// Recupera la categoria di rischio per l'utente e la valida tramite cookie
DEFINE AR "GetCategoriaRischio"
	CONDITION
		CALL is_request_method WITH "GET"
		http.url is in msvc_categoria
		exists http.query["CF"]
		exists http.query["TEAM"]
		!exists http.query["categoria"]
		!exists http.cookie["validation"]
	ACTION
		MANAGE "getcategoria"
	;


// Effettua il redirect verso la pagina dei Poli Vaccinali sse la categoria e' stata validata dalla VA
DEFINE AR "RedirectToPoliVaccinali"
	CONDITION
		CALL is_request_method WITH "GET"
		http.url is in msvc_categoria
		exists http.query["CF"]
		exists http.query["categoria"]
		exists http.query["TEAM"]
        exists http.cookie["validation"]
        CALL is_valid_cookie WITH http.cookie["validation"]
	ACTION
		tcp.redirect "? to-application-server"
	;

// Dal client arriva una richiesta POST con i dati per prenotare un certo appuntamento, la Va lo direziona verso il server dopo aver validato il cookie
DEFINE AR "RichiestaPrenotazione"
	CONDITION
		CALL is_request_method WITH "POST"
		http.url is in msvc_prenotazione
		exists http.data["CF"]
		exists http.data["categoria"]
		exists http.data["TEAM"]
		//dati prenotazione
        exists http.cookie["validation"]
        CALL is_valid_cookie WITH http.cookie["validation"] 
	ACTION
		tcp.redirect "? to-application-server"
	;


// Recupera la categoria di rischio per l'utente e la valida tramite cookie
DEFINE AR "GetRiepilogo"
	CONDITION
		CALL is_request_method WITH "GET"
		http.url is in msvc_riepilogo
		exists http.query["CF"]
		exists http.query["TEAM"]
		exists http.query["NUMERO_RICHIESTA"]
		!exists http.cookie["session"]
	ACTION
		MANAGE "getriepilogo"
	;

DEFINE AR "RedirectToRiepilogo"
	CONDITION
		CALL is_request_method WITH "GET"
		http.url is in msvc_riepilogo
		exists http.query["CF"]
		exists http.query["TEAM"]
		exists http.query["NUMERO_RICHIESTA"]
		exists http.cookie["session"]
		CALL is_valid_session_cookie WITH http.cookie["session"] 
	ACTION
		tcp.redirect "? to-application-server"
	;

DEFINE AR "RichiestaDeletePrenotazione"
	CONDITION
		CALL is_request_method WITH "DELETE"
		http.url is in msvc_riepilogo
		exists http.query["CF"]
		exists http.query["TEAM"]
		exists http.query["NUMERO_RICHIESTA"]
		exists http.cookie["session"]
		CALL is_valid_session_cookie WITH http.cookie["session"] 
	ACTION
		tcp.redirect "? to-application-server"
	;

DEFINE AR "GoToErrorPage"
	CONDITION
		http.url is in error_page
	ACTION
		tcp.redirect "? to-application-server"
	;

DEFINE AR "ErrorHandlerVAlidation"
	CONDITION
		http.url is in all
	ACTION
		MANAGE "errormanager"
	;

//TODO verficare che funzioni
DEFINE VR "ReportRichiestaPoliVaccinali"
	CONDITION
		obs.event is net.send
		http.url is in msvc_categoria
		exists http.query["CF"]
		exists http.query["TEAM"]
		!exists http.query["categoria"]
		!exists http.cookie["validation"]
	VAR
		cf = http.query["CF"]
		team = http.query["TEAM"]
		v_sid = net.sesid
	ACTION
		ADD "step1" to set s
		report richieste_poli_vaccinali {CAT{http.url, " cf=", http.query["CF"], " team=", http.query["TEAM"] }}
	NEXT
		obs.event is net.recv
		http.answer.code is "302 Found"
		net.sesid is v_sid
	VAR 
		valCookie = http.answer.header["Set-Cookie"]
	ACTION
		ADD "step2" to set s
		report richieste_poli_vaccinali {
			CAT {http.answer.header["Location"], " validation=", valCookie}
		}
	NEXT
		obs.event is net.send
		http.url is in msvc_categoria
		http.query["CF"] is cf		//??
		http.query["TEAM"] is team	//??
		exists http.query["categoria"]
		exists http.cookie["validation"]
	VAR 
		v_sid = net.sesid
		categoria = http.query["categoria"]
	ACTION
		ADD "step3" to set s
		report richieste_poli_vaccinali {
			CAT{"Utente ", cf, " Ã¨ in possesso del cookie e vuole raggiungere la categoria ", categoria}
		}
	NEXT
		obs.event is net.recv
		http.answer.code is "200 OK"
		net.sesid is v_sid
	ACTION
		ADD "step4" to set s
		report richieste_poli_vaccinali {
			CAT{"Utente ", cf, " visualizza correttamente i poli vaccinali per categoria ", categoria}
		}
	;


DEFINE VR "ReportRichiestaPrenotazione"
	CONDITION
		http.url is in msvc_prenotazione
		exists http.data["CF"]
		exists http.data["categoria"]
		exists http.data["TEAM"]
		//dati prenotazione
        exists http.cookie["validation"]
	VAR
		categoria = http.data["categoria"]
		cf = http.data["CF"]
		v_sid = net.sesid
	ACTION
		report richieste_prenotazione {
			CAT{"Utente ", cf, " richiede di prenotare per la categoria ", categoria, " presso ... in data ..."}
		}
	NEXT(
		obs.event is net.recv
		http.answer.code is "200 OK"
		net.sesid is v_sid
	ACTION
		report richieste_prenotazione {
			CAT{"Utente ", cf, " ha correttamente prenotato presso ... in data ..."}
		}
	)
	OR(
		obs.event is net.recv
		net.sesid is v_sid
		http.answer.code is "404 Not Found"
	ACTION
		report richieste_prenotazione {
			CAT{"Utente ", cf, " non e' riuscito ad ultimare la prenotazione"}
		}
	)
	;